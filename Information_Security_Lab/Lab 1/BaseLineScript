#!/usr/bin/python3

import sys, os, subprocess, re

# Argument 1: Submission path
# Argument 2: Tamarin path

TAMARIN_VERSION = '1.8.0'
THEORY_SPTHY_REGEX = r'^theory (\w+).*$'

skeletons = {}	

temp = {}
 
skeletons['Protocol1'] =  [ "theory Protocol1"
                          , "builtins: asymmetric-encryption, hashing"
                          , "rule Generate_KeyPair:"
                          , "rule Alice_1:"
                          , "rule Bob_1:"
                          , "rule Alice_2:"
                          , 'lemma executable:exists-trace "Ex #i #j A B kab.   FinishedA(A, B, kab)@i & FinishedB(B, A, kab)@j & not (A = B)"' ]

skeletons['Protocol2'] =    [ "theory Protocol2"
                            , "builtins: diffie-hellman, signing"
                            , "rule Generate_KeyPair:"
                            , "rule Alice_1:"
                            , "rule Bob_1:"
                            , "rule Alice_2:"
                            , "rule Bob_2:"
                            , 'lemma executable: exists-trace "Ex #i #j A B kab. FinishedA(A, B, kab)@i & FinishedB(B, A, kab)@j & not (A = B)"' ]

skeletons['Protocol2Reveal'] =    [ "theory Protocol2"
                            , "builtins: diffie-hellman, signing"
                            , "rule Generate_KeyPair:"
                            , "rule RevealKey:"
                            , "rule Alice_1:"
                            , "rule Bob_1:"
                            , "rule Alice_2:"
                            , "rule Bob_2:"
                            , 'lemma executable: exists-trace "Ex #i #j A B kab. FinishedA(A, B, kab)@i & FinishedB(B, A, kab)@j & not (A = B) & not (Ex X #i. Compromised(X)@i)"' ]

skeletons['Protocol3'] =    [ "theory Protocol3"
                            , "builtins: diffie-hellman, signing functions: mac/2, kdf/1"
                            , "rule Generate_KeyPair:"
                            , "rule RevealKey:"
                            , "rule Alice_1:"
                            , "rule Bob_1:"
                            , "rule Alice_2:"
                            , "rule Bob_2:"
                            , 'lemma executable: exists-trace "Ex #i #j A B kab. FinishedA(A, B, kab)@i & FinishedB(B, A, kab)@j & not (A = B) & not (Ex X #i. Compromised(X)@i)"' ]

skeletons['Mastercard'] =  [ "theory Mastercard"
                           , "builtins:  signing functions: f/2, MAC/2, MACprime/2"
                           , "rule Terminal_Issuer_Channel:    [ Send(Sender, Recipient, channelID, msg) ]  -->    [ Recv(Sender, Recipient, channelID, msg) ]"
                           , "rule Generate_ATC:    [ Fr(~ATC) ]-->[ !ATC(~ATC), Out(~ATC) ]"
                           , "rule Create_Card:    [ Fr(~PAN),//card number      Fr(~mk),//symmetric key shared with issuer      Fr(~privkCard)//card's private key     ] -->    [ CardCreated(~PAN, $Issuer, ~privkCard),      !SharedKeyIssuer(~PAN, ~mk, $Issuer),//annotate the issuing bank      !LtkCard(~PAN, ~privkCard),      !Pk(~PAN, pk(~privkCard)),      Out(pk(~privkCard)) ]"
                           , "rule Compromise_Card:"
                           , "rule Compromise_Shared_Key:"
                           , "rule Terminal_Read_Record:"
                           , "rule Card_Responds_Records:"
                           , "rule Terminal_Receives_Records:"
                           , "rule Card_Responds_To_InternalAuthenticate:"
                           , "rule Terminal_Sends_GenerateAC:"
                           , "rule Card_Generates_AC:"
                           , "rule Terminal_Receives_TC:"
                           , "rule Terminal_Receives_ARQC:"
                           , "rule Issuer_Verifies_AC:"
                           , "rule Terminal_Receives_ARPC:"
                           , 'lemma executable_offline:  exists-trace  "Ex PAN ter ATC AC PDOL CID mk is #i #j.    i < j &    Card_Generates_AC(PAN,is, mk, ATC, PDOL, AC, CID)@i &    Terminal_Receives_TC(ter, PAN, is, ATC, PDOL, AC)@j &    not (Ex A #a. Compromised(A)@a) &    (All p m a p2 a2 c2 i #j. Card_Generates_AC(p,i, m, a, p2, a2, c2)@j ==> #j=#i )"'
                           , 'lemma executable_online:  exists-trace  "Ex PAN is ter ATC mk AC PDOL CID #i #j #l #k .    i < j &    Card_Generates_AC(PAN, is, mk, ATC, PDOL, AC, CID)@i &    Terminal_Receives_ARQC(ter, PAN, is, ATC, PDOL, AC)@j &    j < l &    Issuer_Verifies_AC(is, ter, PAN, mk, ATC, PDOL, AC)@l &    Terminal_Receives_ARPC(ter,PAN,is,ATC, PDOL, AC )@k &    not (Ex A #a. Compromised(A)@a) &    (All p m a i p2 a2 c2 #j. Card_Generates_AC(p,i, m, a, p2, a2, c2)@j ==> #j=#i )"' ]


# Check that student provided submission path
if len(sys.argv) < 2:
    print('ERROR: Please provide your submission path as an argument. ')
if len(sys.argv) < 3:
    print('ERROR: Please provide the path to Tamarin. ')
else :
    submission_path = str(sys.argv[1])
    tamarin_path = str(sys.argv[2])

    #Check that Submission path exists
    if not os.path.exists(submission_path):
        print('ERROR: You did not provide a valid path to your submission. Please provide the path to your submission as the first argument. ')
    else :
        # Check that Tamarin path exists
        if not os.path.exists(tamarin_path):
            print("ERROR: You did not provide a valid path to Tamarin. Please provide the path to Tamarin as the second argument. You can get the path to Tamarin by the command 'which tamarin-prover'. ")
        else :
        
            errors = False

            # Check Tamarin version
            version = subprocess.run([tamarin_path, '--version'], text=True, capture_output=True)

            if not version.stdout.startswith('tamarin-prover ' + TAMARIN_VERSION):
                print('ERROR: You are not using the release version ' + TAMARIN_VERSION + '. Make sure to test your submission against the release version ' + TAMARIN_VERSION + ' before submission. ')
                errors = True

            # Get theory name
            theory_name = ''
            for line in open(submission_path).readlines():
                m = re.match(THEORY_SPTHY_REGEX, line)
                if m:
                    theory_name = m.group(1)
                    break
            
            # test that the skeleton is contained in the submission. 
            # This is sensitive to comments. Instruct the students to not add comments in the skeleton part.
            if os.path.exists(submission_path):
                    theory_file_open = open(submission_path)
                    theory_text = theory_file_open.read()
                    
                    if theory_name in skeletons:
                        # Check that the submission file name is the same as the theory name.
                        if submission_path.split('/')[-1].replace(".spthy", "") != theory_name:
                            print("ERROR: Your submission file name does not correspond to the theory name. Your submission file should be called " + theory_name + ".spthy")
                            errors = True

                        for section in skeletons[theory_name]:
                            #check, if the section is in the student's solution		
                            if "".join(section.split()) not in "".join(theory_text.split()):
                                    if not errors:
                                        print("ERROR: The skeleton is not contained in your submission. Make sure that you do not change the sections marked with Do not Change. There is a change in the following section: " + section + " ")
                                        errors = True
                    else:
                        print("ERROR: No skeleton is matching. Make sure you did not change the theory name. ")
                        print(theory_name)
                        errors = True
            
            #Check that we do not get warnings from Tamarin
            tamarin_output = subprocess.run([tamarin_path, submission_path], text=True, capture_output=True)

            #Warnings are in stout, errors in stderr
            #However, the new Tamarin release also outputs some "[Saturating Sources] Step 1/5". Thus: check if "summary of summaries is present"

            if (not ("summary of summaries:" in tamarin_output.stdout )) and tamarin_output.stderr:
                print("ERROR: Opening your submission with Tamarin results in an error. ")
                errors = True
            elif "WARNING: the following wellformedness checks failed!" in tamarin_output.stdout:
                print("ERROR: Opening your submission with Tamarin results in failing wellformedness checks. ")
                errors = True
            elif "Warning" in tamarin_output.stdout:
                print("ERROR: Opening your submission with Tamarin results in a Warning.")
                errors = True

            if not errors:
                print('SUCCESS: You passed all the base line tests. You may submit your theory. ')
            else: 
                print('Make sure to resolve those errors before hand-in.')
